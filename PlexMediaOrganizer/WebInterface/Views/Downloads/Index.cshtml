@model PlexMediaOrganizer.WebInterface.Models.DownloadFolderViewModel
@using System.IO
@using System.Linq

@{
    ViewData["Title"] = "Downloads";
}

<div class="card">
    <div class="card-header bg-primary text-white">
        <h5 class="card-title mb-0">Download Folder Contents</h5>
    </div>
    <div class="card-body">
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb">
                @{
                    var pathParts = Model.CurrentPath.Split('\\', StringSplitOptions.RemoveEmptyEntries);

                    // Root directory (first part)
                    <li class="breadcrumb-item"><a href="@Url.Action("Index", "Downloads")">@pathParts[0]</a></li>

                    // Build path for each subsequent part
                    var currentPath = pathParts[0];
                    for (int i = 1; i < pathParts.Length; i++)
                    {
                        currentPath = currentPath + "\\" + pathParts[i];
                        var relativePath = currentPath.Substring(pathParts[0].Length).TrimStart('\\');
                        <li class="breadcrumb-item"><a href="@Url.Action("Index", "Downloads", new { path = relativePath })">@pathParts[i]</a></li>
                    }
                }
            </ol>
        </nav>

        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Type</th>
                        <th>Size</th>
                        <th>Last Modified</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model.Files)
                    {
                        <tr>
                            <td>
                                @if (item.IsDirectory)
                                {
                                    var relativePath = item.FullPath.Substring(Model.CurrentPath.Split('\\').First().Length).TrimStart('\\');
                                    <i class="bi bi-folder-fill text-warning"></i>
                                    <a href="@Url.Action("Index", "Downloads", new { path = relativePath })">@item.Name</a>
                                }
                                else
                                {
                                    @if (item.IsMediaFile)
                                    {
                                        <i class="bi bi-film text-primary"></i>
                                    }
                                    else
                                    {
                                        <i class="bi bi-file-earmark text-secondary"></i>
                                    }
                                    <span>@item.Name</span>
                                }
                            </td>
                            <td>
                                @if (item.IsDirectory)
                                {
                                    <span>Directory</span>
                                }
                                else if (item.IsMediaFile)
                                {
                                    <span>@item.MediaType</span>
                                }
                                else
                                {
                                    <span>@item.Extension</span>
                                }
                            </td>
                            <td>
                                @if (!item.IsDirectory)
                                {
                                    <span>@FormatFileSize(item.Size)</span>
                                }
                            </td>
                            <td>@item.LastModified.ToString("g")</td>
                            <td>
                                @if (item.IsMediaFile)
                                {
                                    <button type="button" class="btn btn-sm btn-primary process-file"
                                            data-bs-toggle="modal"
                                            data-bs-target="#processFileModal"
                                            data-filepath="@item.FullPath"
                                            data-filename="@item.Name"
                                            data-mediatype="@item.MediaType"
                                            data-title="@item.SuggestedTitle"
                                            data-year="@item.SuggestedYear"
                                            data-season="@item.SuggestedSeason"
                                            data-episode="@item.SuggestedEpisode">
                                        Process
                                    </button>
                                }
                            </td>
                        </tr>
                    }
                    @if (!Model.Files.Any())
                    {
                        <tr>
                            <td colspan="5" class="text-center">No files found</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- Process File Modal -->
<div class="modal fade" id="processFileModal" tabindex="-1" aria-labelledby="processFileModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="processFileModalLabel">Process Media File</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="processFileForm">
                    <input type="hidden" id="filePath" name="filePath" />

                    <div class="mb-3">
                        <label for="fileName" class="form-label">File Name</label>
                        <input type="text" class="form-control" id="fileName" readonly />
                    </div>

                    <div class="mb-3">
                        <label for="mediaType" class="form-label">Media Type</label>
                        <select class="form-select" id="mediaType" name="mediaType" required>
                            <option value="Movie">Movie</option>
                            <option value="TvShow">TV Show</option>
                        </select>
                    </div>

                    <div class="mb-3">
                        <label for="title" class="form-label">Title</label>
                        <input type="text" class="form-control" id="title" name="title" required />
                    </div>

                    <div class="mb-3">
                        <label for="year" class="form-label">Year</label>
                        <input type="number" class="form-control" id="year" name="year" min="1900" max="2099" />
                    </div>

                    <div id="tvShowFields" style="display: none;">
                        <div class="mb-3">
                            <label for="season" class="form-label">Season</label>
                            <input type="number" class="form-control" id="season" name="season" min="1" max="100" />
                        </div>

                        <div class="mb-3">
                            <label for="episode" class="form-label">Episode</label>
                            <input type="number" class="form-control" id="episode" name="episode" min="1" max="100" />
                        </div>
                    </div>
                </form>
                <div id="processResult" class="alert" style="display: none;"></div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" id="processFileButton">Process</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Show/hide TV show fields based on media type selection
            document.getElementById('mediaType').addEventListener('change', function() {
                const tvShowFields = document.getElementById('tvShowFields');
                if (this.value === 'TvShow') {
                    tvShowFields.style.display = 'block';
                    document.getElementById('season').setAttribute('required', 'required');
                    document.getElementById('episode').setAttribute('required', 'required');
                } else {
                    tvShowFields.style.display = 'none';
                    document.getElementById('season').removeAttribute('required');
                    document.getElementById('episode').removeAttribute('required');
                }
            });

            // Set modal data when the Process button is clicked
            document.querySelectorAll('.process-file').forEach(button => {
                button.addEventListener('click', function() {
                    const filePath = this.getAttribute('data-filepath');
                    const fileName = this.getAttribute('data-filename');
                    const mediaType = this.getAttribute('data-mediatype');
                    const title = this.getAttribute('data-title');
                    const year = this.getAttribute('data-year');
                    const season = this.getAttribute('data-season');
                    const episode = this.getAttribute('data-episode');

                    document.getElementById('filePath').value = filePath;
                    document.getElementById('fileName').value = fileName;
                    document.getElementById('mediaType').value = mediaType || 'Movie';
                    document.getElementById('title').value = title || '';
                    document.getElementById('year').value = year || '';
                    document.getElementById('season').value = season || '';
                    document.getElementById('episode').value = episode || '';

                    // Trigger change event to show/hide TV show fields
                    const event = new Event('change');
                    document.getElementById('mediaType').dispatchEvent(event);

                    // Reset result message
                    const resultDiv = document.getElementById('processResult');
                    resultDiv.style.display = 'none';
                    resultDiv.textContent = '';
                    resultDiv.className = 'alert';
                });
            });

            // Process file when the Process button in the modal is clicked
            document.getElementById('processFileButton').addEventListener('click', async function() {
                const form = document.getElementById('processFileForm');
                if (!form.checkValidity()) {
                    form.reportValidity();
                    return;
                }

                const filePath = document.getElementById('filePath').value;
                const title = document.getElementById('title').value;
                const mediaType = document.getElementById('mediaType').value;
                const year = document.getElementById('year').value ? parseInt(document.getElementById('year').value) : null;
                const season = document.getElementById('season').value ? parseInt(document.getElementById('season').value) : null;
                const episode = document.getElementById('episode').value ? parseInt(document.getElementById('episode').value) : null;

                // Validate TV show fields if media type is TV show
                if (mediaType === 'TvShow' && (!season || !episode)) {
                    alert('Season and episode are required for TV shows');
                    return;
                }

                const data = {
                    filePath: filePath,
                    title: title,
                    year: year,
                    season: season,
                    episode: episode,
                    mediaType: mediaType
                };

                try {
                    const button = document.getElementById('processFileButton');
                    button.disabled = true;
                    button.textContent = 'Processing...';

                    const response = await fetch('/api/downloads/approve', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(data)
                    });

                    const result = await response.json();
                    const resultDiv = document.getElementById('processResult');

                    if (response.ok) {
                        resultDiv.className = 'alert alert-success';
                        resultDiv.textContent = `Success: ${result.message}`;

                        // Reload the page after 2 seconds to refresh the file list
                        setTimeout(() => {
                            window.location.reload();
                        }, 2000);
                    } else {
                        resultDiv.className = 'alert alert-danger';
                        resultDiv.textContent = `Error: ${result.message}`;
                    }

                    resultDiv.style.display = 'block';
                } catch (error) {
                    console.error('Error:', error);
                    const resultDiv = document.getElementById('processResult');
                    resultDiv.className = 'alert alert-danger';
                    resultDiv.textContent = `Error: ${error.message}`;
                    resultDiv.style.display = 'block';
                } finally {
                    const button = document.getElementById('processFileButton');
                    button.disabled = false;
                    button.textContent = 'Process';
                }
            });
        });
    </script>
}

@functions {
    string FormatFileSize(long bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB", "TB" };
        double len = bytes;
        int order = 0;
        while (len >= 1024 && order < sizes.Length - 1)
        {
            order++;
            len = len / 1024;
        }
        return $"{len:0.##} {sizes[order]}";
    }
}
